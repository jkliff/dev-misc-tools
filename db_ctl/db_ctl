#!/usr/bin/python
# ssss easy_install pyyaml
"""Sample config: 

nodes: 
    version: 9.0 
    path: /path/to/db
    pg_path: /path/to/root/of/pg/dir

fubar-test:
    version: 9.0
    path: /path/to/other/db
    pg_path: /path/to/other/root/of/pgdir
    run_as: postgres

mongo_devel:
    type: mongo
    version:
    path: /path/to//dev/mongo_dbs/devel
    mongo_path: /path/to/bin/mongod
    pidfile: /path/to//dev/mongo_dbs/devel.pid
    logfile: /path/to//dev/mongo_dbs/devel.log

pg_path should point to the install dir o postgres, not its bin directory.

"""
import os
import sys
import argparse
import yaml
import platform


SYSTEM = platform.system()
PLATFORM = {
    'kill': {'Darwin': 'gkill'}
}


def _ (cmd, run_as = None):
    if run_as:
        cmd = 'sudo su - %s -c "%s"' % (run_as, cmd)

    os.system (cmd)

class DBCommand:
    def status(self, db_data, run_as=None):
        pass
    def start(self, db_data, run_as=None):
        pass
    def stop(self, db_data, run_as=None):
        pass

class PostgreSQLCommands (DBCommand):
    def __setup_shmem (self):
        _ ('/usr/sbin/sysctl -w kern.sysv.shmmax=1073741824', run_as='root')
        _ ('/usr/sbin/sysctl -w kern.sysv.shmall=1073741824', run_as='root')

    def status (self, db_data, run_as=None):

        cmd = '%s/bin/pg_ctl status -D %s' % (db_data ['pg_path'], db_data['path'])

        #if run_as is not None:
        #    cmd = ('sudo %s ' % run_as) + cmd

        _ (cmd)

    def start (self, db_data, run_as=None):
        self.__setup_shmem ()
        _ ('%s/bin/pg_ctl start -D %s' % (db_data ['pg_path'], db_data['path']))

    def stop (self, db_data, run_as=None):
        _ ('%s/bin/pg_ctl stop -D %s' % (db_data ['pg_path'], db_data['path']))

class MongoDBCommands (DBCommand):
    def __get_pid (self, pidfile):

        pid = None
        if os.path.exists (pidfile):
            with (open (pidfile)) as p:
                pid = p.read().strip()
            if pid == '':
                pid = None

        return pid

    def status (self, db_data, run_as=None):
        pid = self.__get_pid (db_data['pidfile'])
        if pid is None:
            print '%s does not seem to be running.' % db_data ['id']
        else:
            print '%s seems to be running on pid %s.' % (db_data ['id'], pid)

    def start (self, db_data, run_as=None):
        _ ('%s --dbpath %s --master --pidfilepath %s --logpath %s --logappend &' % (db_data['mongo_path'], db_data ['path'], db_data ['pidfile'], db_data['logfile']))

    def stop (self, db_data, run_as=None):
        pid = self.__get_pid (db_data['pidfile'])

        if pid is None:
            print '%s does not seem to be running.' % db_data ['id']
            return

        _ ('%s -15 %s' % (PLATFORM['kill'][SYSTEM], pid))


DB_COMMANDS = {
    'pg': PostgreSQLCommands(),
    'mongo': MongoDBCommands()
}


def _start_db (db_data):
    DB_COMMANDS[db_data ['type']].start ((db_data), db_data['run_as'])

def _stop_db (db_data):
    DB_COMMANDS[db_data ['type']].stop ((db_data), db_data['run_as'])

def _status_db (db_data):
    DB_COMMANDS[db_data ['type']].status ((db_data), db_data['run_as'])

def _list_status_db (nouse):
    global CONF
    for db in sorted(CONF.keys()):
        print db
        _status_db (CONF[db])

CONF = {}
COMMANDS = {
    'start': _start_db,
    'stop': _stop_db,
    'status': _status_db,
    'lstatus': _list_status_db}

def load_db_confs (conf_path = None):
    global CONF

    conf_path = os.path.expanduser (conf_path)

    if not os.path.exists (conf_path):
        print 'No configuration could be read. Please specify the path with the -c option.'
        exit (-1)

    with (open (conf_path)) as f:
        CONF = yaml.load (f.read())

    for k in CONF.keys():
        CONF[k]['id'] = k
        if 'run_as' not in CONF[k]:
            CONF[k]['run_as'] = None

def parse_params ():
    parser = argparse.ArgumentParser (description = 'database instance manager')
    parser.add_argument ('-c', '--config', default = '~/.db_ctl.conf', help = 'configuration file')
    parser.add_argument ('command', type = str, nargs = 1)
    parser.add_argument ('database', type = str, nargs = '?')

    return parser.parse_args()

def main():
    params = parse_params ()
    load_db_confs (params.config)

    cmd = params.command [0]
    if cmd not in COMMANDS.keys():
        print 'command not found', cmd
        exit (-2)

    db = None
    if params.database:
        db = params.database

    if cmd in ['start', 'stop', 'status']:
        if db is None:
            print 'too few params'
            exit (-3)

        if db not in CONF.keys():
            print 'db conf not found for %s.' % db
            exit (-4)

    p = None
    if db is not None:
        p = CONF [db]

    COMMANDS [cmd] (p)

if __name__ == '__main__':
    main()
