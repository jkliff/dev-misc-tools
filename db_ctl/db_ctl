#!/usr/bin/python
# sudo easy_install pyyaml
"""Sample config: 

nodes: 
    version: 9.0 
    path: /path/to/db
    pg_path: /path/to/root/of/pg/dir

zalando-test:
    version: 9.0
    path: /path/to/other/db
    pg_path: /path/to/other/root/of/pgdir
    run_as: postgres

pg_path should point to the install dir o postgres, not its bin directory.

"""
import os
import sys
import argparse
import yaml
import platform


SYSTEM = platform.system()
PLATFORM = {
    'kill': {'Darwin': 'gkill'}
}

DB_COMMANDS = {
    'pg': {
        'start': lambda db_data: '%s/bin/pg_ctl start -D %s' % (db_data ['pg_path'], db_data['path']),
        'stop': lambda db_data: '%s/bin/pg_ctl stop -D %s' % (db_data ['pg_path'], db_data['path']),
        'status': lambda db_data: '%s/bin/pg_ctl status -D %s' % (db_data ['pg_path'], db_data['path'])
    },
    'mongo': {
        'start': lambda db_data: '%s --dbpath %s --master --pidfilepath %s --logpath %s --logappend &' % (db_data['mongo_path'], db_data ['path'], db_data ['pidfile'], db_data['logfile']),
        'stop': lambda db_data: '%s -15 $(cat %s)' % (PLATFORM['kill'][SYSTEM], db_data['pidfile'])
    }
}



def _ (cmd, run_as = None):
    if run_as:
        cmd = 'sudo su - %s -c "%s"' % (run_as, cmd)

    os.system (cmd)

def _start_db (db_data):
    # todo: handle other versions of the db
    # todo: handle mac startup:
    #       sudo sysctl -w kern.sysv.shmmax=1073741824
    #       sudo sysctl -w kern.sysv.shmall=1073741824
    _ (DB_COMMANDS[db_data ['type']]['start'](db_data), db_data['run_as'])

def _stop_db (db_data):
    _ (DB_COMMANDS[db_data ['type']]['stop'](db_data), db_data['run_as'])

def _status_db (db_data):
    if 'status' not in DB_COMMANDS[db_data['type']]:
        print 'no info'
        return

    _ (DB_COMMANDS[db_data ['type']]['status'](db_data), db_data['run_as'])

def _list_status_db (nouse):
    global CONF
    for db in CONF.keys():
        print db
        _status_db (CONF[db])

CONF = {}
COMMANDS = {
    'start': _start_db,
    'stop': _stop_db,
    'status': _status_db,
    'lstatus': _list_status_db}

def load_db_confs (conf_path = None):
    global CONF

    conf_path = os.path.expanduser (conf_path)

    if not os.path.exists (conf_path):
        print 'No configuration could be read. Please specify the path with the -c option.'
        exit (-1)

    with (open (conf_path)) as f:
        CONF = yaml.load (f.read())

    for k in CONF.keys():
        if 'run_as' not in CONF[k]:
            CONF[k]['run_as'] = None

def parse_params ():
    parser = argparse.ArgumentParser (description = 'database instance manager')
    parser.add_argument ('-c', '--config', default = '~/.db_ctl.conf', help = 'configuration file')
    parser.add_argument ('command', type = str, nargs = 1)
    parser.add_argument ('database', type = str, nargs = '?')

    return parser.parse_args()

def main():
    params = parse_params ()
    load_db_confs (params.config)

    cmd = params.command [0]
    if cmd not in COMMANDS.keys():
        print 'command not found', cmd
        exit (-2)

    db = None
    if params.database:
        db = params.database

    if cmd in ['start', 'stop', 'status']:
        if db is None:
            print 'too few params'
            exit (-3)

        if db not in CONF.keys():
            print 'db conf not found for %s.' % db
            exit (-4)

    p = None
    if db is not None:
        p = CONF [db]

    COMMANDS [cmd] (p)

if __name__ == '__main__':
    main()
