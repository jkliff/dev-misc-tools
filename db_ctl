#!/usr/bin/python

import os
import sys
import argparse
import yaml

_ = os.system

def _start_db (db_data):
    # todo: handle other versions of the db
    # todo: handle mac startup: 
    #       sudo sysctl -w kern.sysv.shmmax=1073741824
    #       sudo sysctl -w kern.sysv.shmall=1073741824
    _ ('%s/bin/pg_ctl start -D %s' % (db_data ['pg_path'], db_data['path']))

def _stop_db (db_data):
    _ ('%s/bin/pg_ctl stop -D %s' % (db_data ['pg_path'], db_data['path']))

def _status_db (db_data):
    _ ('%s/bin/pg_ctl status -D %s' % (db_data ['pg_path'], db_data['path']))

def _list_status_db (nouse):
    global CONF
    for db in CONF.keys():
        print db
        _status_db (CONF[db])

CONF = {}
COMMANDS = {'start': _start_db, 'stop': _stop_db, 'status': _status_db, 'lstatus': _list_status_db}

def load_db_confs (conf_path = None):
    global CONF

    if not os.path.exists (conf_path):
        print 'No configuration could be read. Please specify the path with the -c option.'
        exit (-1)

    with (open (conf_path)) as f:
        CONF = yaml.load (f.read())

def parse_params ():
    parser = argparse.ArgumentParser (description = 'database instance manager')
    parser.add_argument ('-c', '--config', default = '~/.db_ctl.conf', help = 'configuration file')
    parser.add_argument ('command', type = str, nargs = 1)
    parser.add_argument ('database', type = str, nargs = '?')

    return parser.parse_args()

def main():
    params = parse_params ()
    load_db_confs (params.config)

    cmd = params.command [0]
    if cmd not in COMMANDS.keys():
        print 'command not found', cmd
        exit (-2)

    db = None
    if params.database:
        db = params.database[0]

    if cmd in ['start', 'stop', 'status']:
        if db is None:
            print 'too few params'
            exit (-3)

        if db not in CONF.keys():
            print 'db conf not found for %s.' % db
            exit (-4)

    p = None
    if db is not None:
        p = CONF [db]

    COMMANDS [cmd] (p)

if __name__ == '__main__':
    main()
